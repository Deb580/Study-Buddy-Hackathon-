{
  "service": {
    "service": "ai-study-assistant",
    "serviceObject": {
      "name": "ai-study-assistant"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-east-1",
      "stage": "dev",
      "timeout": 60,
      "environment": {
        "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
        "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
        "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
        "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": [
            "arn:aws:dynamodb:us-east-1:*:table/ai-study-assistant-dev-QuizSessions",
            "arn:aws:dynamodb:us-east-1:*:table/ai-study-assistant-dev-QuizSessions/index/*",
            "arn:aws:dynamodb:us-east-1:*:table/ai-study-assistant-dev-MultiplayerRooms",
            "arn:aws:dynamodb:us-east-1:*:table/ai-study-assistant-dev-TranscriptionJobs"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "bedrock:InvokeModel",
            "bedrock:ListFoundationModels",
            "bedrock:GetFoundationModel",
            "aws-marketplace:ViewSubscriptions"
          ],
          "Resource": "*"
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GenerateContentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-generateContent"
            }
          },
          "UploadHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-uploadHandler"
            }
          },
          "CreateSessionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-createSession"
            }
          },
          "JoinSessionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-joinSession"
            }
          },
          "GetSessionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-getSession"
            }
          },
          "SubmitAnswerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-submitAnswer"
            }
          },
          "NextQuestionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-nextQuestion"
            }
          },
          "GetLeaderboardLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-getLeaderboard"
            }
          },
          "UploadAudioLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-uploadAudio"
            }
          },
          "GetTranscriptionStatusLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-getTranscriptionStatus"
            }
          },
          "GenerateMoreQuestionsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-generateMoreQuestions"
            }
          },
          "ExportQuizletLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-exportQuizlet"
            }
          },
          "ExportKahootLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-exportKahoot"
            }
          },
          "ExportStudyGuideLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-exportStudyGuide"
            }
          },
          "MultiplayerCreateRoomLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-multiplayerCreateRoom"
            }
          },
          "MultiplayerJoinRoomLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-multiplayerJoinRoom"
            }
          },
          "MultiplayerGetRoomLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-multiplayerGetRoom"
            }
          },
          "MultiplayerStartRoomLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-multiplayerStartRoom"
            }
          },
          "MultiplayerLeaveRoomLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-multiplayerLeaveRoom"
            }
          },
          "MultiplayerSubmitAnswerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-multiplayerSubmitAnswer"
            }
          },
          "MultiplayerNextQuestionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ai-study-assistant-dev-multiplayerNextQuestion"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "ai-study-assistant",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ai-study-assistant-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ai-study-assistant-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "ai-study-assistant",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GenerateContentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/generateContent.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-generateContent",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GenerateContentLogGroup"
            ]
          },
          "UploadHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/uploadHandler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-uploadHandler",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UploadHandlerLogGroup"
            ]
          },
          "CreateSessionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/createSession.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-createSession",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateSessionLogGroup"
            ]
          },
          "JoinSessionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/joinSession.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-joinSession",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "JoinSessionLogGroup"
            ]
          },
          "GetSessionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/getSession.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-getSession",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSessionLogGroup"
            ]
          },
          "SubmitAnswerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/submitAnswer.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-submitAnswer",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SubmitAnswerLogGroup"
            ]
          },
          "NextQuestionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/nextQuestion.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-nextQuestion",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NextQuestionLogGroup"
            ]
          },
          "GetLeaderboardLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/getLeaderboard.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-getLeaderboard",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetLeaderboardLogGroup"
            ]
          },
          "UploadAudioLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/uploadAudio.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-uploadAudio",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UploadAudioLogGroup"
            ]
          },
          "GetTranscriptionStatusLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/getTranscriptionStatus.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-getTranscriptionStatus",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTranscriptionStatusLogGroup"
            ]
          },
          "GenerateMoreQuestionsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/generateMoreQuestions.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-generateMoreQuestions",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GenerateMoreQuestionsLogGroup"
            ]
          },
          "ExportQuizletLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/exportQuizlet.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-exportQuizlet",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExportQuizletLogGroup"
            ]
          },
          "ExportKahootLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/exportKahoot.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-exportKahoot",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExportKahootLogGroup"
            ]
          },
          "ExportStudyGuideLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/exportStudyGuide.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-exportStudyGuide",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExportStudyGuideLogGroup"
            ]
          },
          "MultiplayerCreateRoomLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/multiplayerCreateRoom.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-multiplayerCreateRoom",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MultiplayerCreateRoomLogGroup"
            ]
          },
          "MultiplayerJoinRoomLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/multiplayerJoinRoom.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-multiplayerJoinRoom",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MultiplayerJoinRoomLogGroup"
            ]
          },
          "MultiplayerGetRoomLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/multiplayerGetRoom.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-multiplayerGetRoom",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MultiplayerGetRoomLogGroup"
            ]
          },
          "MultiplayerStartRoomLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/multiplayerStartRoom.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-multiplayerStartRoom",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MultiplayerStartRoomLogGroup"
            ]
          },
          "MultiplayerLeaveRoomLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/multiplayerLeaveRoom.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-multiplayerLeaveRoom",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MultiplayerLeaveRoomLogGroup"
            ]
          },
          "MultiplayerSubmitAnswerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/multiplayerSubmitAnswer.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-multiplayerSubmitAnswer",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MultiplayerSubmitAnswerLogGroup"
            ]
          },
          "MultiplayerNextQuestionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z/ai-study-assistant.zip"
              },
              "Handler": "functions/multiplayerNextQuestion.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "ai-study-assistant-dev-multiplayerNextQuestion",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
                  "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
                  "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
                  "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MultiplayerNextQuestionLogGroup"
            ]
          },
          "GenerateContentLambdaVersionCMtMVYcn5zawCmJrN4wd5JMQPtuCJlPKVvGMSYnKhng": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GenerateContentLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "UploadHandlerLambdaVersionga586JGo25jDKZdJpB7VqfyNISr5nmrORoEoSZl7qI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UploadHandlerLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "CreateSessionLambdaVersionKsw89Nijl98BuiFp70USTGCtWkpkLMh7GiTq8NC7Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateSessionLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "JoinSessionLambdaVersionirpxIZ38przD81IiKgiMJkNlHkgIUW7XbLyFnTDJDJo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "JoinSessionLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "GetSessionLambdaVersionN4X630kO5T1uWIBV0ZOpvviQUGidJ9t6ApW4SPozTmM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSessionLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "SubmitAnswerLambdaVersionmwMnqukxoiWOGueQ37pMxwa8udxTrFpadAh15hjKE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SubmitAnswerLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "NextQuestionLambdaVersioniYdzxMZ8KrALp0mhaWeHqXUa5PSpFGyiwoIdP8q6Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "NextQuestionLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "GetLeaderboardLambdaVersionDwrL49OiTI8gQSA6txfVhrWC01rGtYKZsvI3ef0wQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetLeaderboardLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "UploadAudioLambdaVersion6nwmcp92nMk6CDZ9QFQHL00HgJmvYwug91c36KQ6k": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UploadAudioLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "GetTranscriptionStatusLambdaVersionAx4GKqbWH0gfjoOwLnpl86ctGQMQBEw8vOC19DtKBs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTranscriptionStatusLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "GenerateMoreQuestionsLambdaVersionFAyU7ip1ucmTxbl9wNGvjE3y75EaaDDVN1NlaDmC8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GenerateMoreQuestionsLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "ExportQuizletLambdaVersion3hoDopZfupT5VvioPxFCIUQ24PLLyPQ3PXoT1FNvo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExportQuizletLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "ExportKahootLambdaVersionVs5c2K65XSVW7NFqH0Fyh4E9wSSgTK3BHuLfI6WaYk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExportKahootLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "ExportStudyGuideLambdaVersionZMlZs01L8jHNCJsasZsQgBmkcddWBVT9GxcckhuyVA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExportStudyGuideLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "MultiplayerCreateRoomLambdaVersionqd9YGUmkUQnzKEO5nlERRkerO9g4dSpQkFVDvYrI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MultiplayerCreateRoomLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "MultiplayerJoinRoomLambdaVersion9Ag9i8PHpQyzaj2pdYldUq7YlbzN1zBZBkgBOP9emRc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MultiplayerJoinRoomLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "MultiplayerGetRoomLambdaVersionZVTu0zuqaoYv7tKWIEw5x0t4smERPkcgUQtPWhmEE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MultiplayerGetRoomLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "MultiplayerStartRoomLambdaVersiondLLX7RxqJc2IYbKhmdH0H6IwOgpOyphbL1A4UvbQ1x8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MultiplayerStartRoomLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "MultiplayerLeaveRoomLambdaVersionykRSDbjWMw0TgXzXR5hjxUhZVT0iEacn5cYKChiAiU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MultiplayerLeaveRoomLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "MultiplayerSubmitAnswerLambdaVersionNzR6npAmWjtvCyaeBMgSqMcHwuE8iqnGQX9YM9VFkRE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MultiplayerSubmitAnswerLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "MultiplayerNextQuestionLambdaVersionVojnY3cIZy2XmYKhfcb4l6BW7B8TOjkCXSx8dRxoY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MultiplayerNextQuestionLambdaFunction"
              },
              "CodeSha256": "B/QC/mhoDhg0g4GKry1nc9XZwCy7CdSvy01dLgoSL4I="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-ai-study-assistant",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceGenerate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "generate",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpload": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "upload",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUploadAudio": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUpload"
              },
              "PathPart": "audio",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSession": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "session",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSessionJoin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSession"
              },
              "PathPart": "join",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSessionIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSession"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSessionIdVarAnswer": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSessionIdVar"
              },
              "PathPart": "answer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSessionIdVarNext": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSessionIdVar"
              },
              "PathPart": "next",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSessionIdVarScores": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSessionIdVar"
              },
              "PathPart": "scores",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTranscription": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "transcription",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTranscriptionJobidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTranscription"
              },
              "PathPart": "{jobId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceQuiz": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "quiz",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceQuizGenerateDashmore": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceQuiz"
              },
              "PathPart": "generate-more",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceExport": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "export",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceExportQuizlet": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceExport"
              },
              "PathPart": "quizlet",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceExportQuizletSetidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceExportQuizlet"
              },
              "PathPart": "{setId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceExportKahoot": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceExport"
              },
              "PathPart": "kahoot",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceExportStudyDashguide": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceExport"
              },
              "PathPart": "study-guide",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMultiplayer": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "multiplayer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMultiplayerRooms": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMultiplayer"
              },
              "PathPart": "rooms",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMultiplayerRoomsCodeVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMultiplayerRooms"
              },
              "PathPart": "{code}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMultiplayerRoomsCodeVarJoin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVar"
              },
              "PathPart": "join",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMultiplayerRoomsCodeVarStart": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVar"
              },
              "PathPart": "start",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMultiplayerRoomsCodeVarLeave": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVar"
              },
              "PathPart": "leave",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMultiplayerRoomsCodeVarAnswer": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVar"
              },
              "PathPart": "answer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMultiplayerRoomsCodeVarNext": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVar"
              },
              "PathPart": "next",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGenerateOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceGenerate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUploadOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpload"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSessionOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSession"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSessionJoinOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSessionJoin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSessionIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSessionIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSessionIdVarAnswerOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSessionIdVarAnswer"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSessionIdVarNextOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSessionIdVarNext"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSessionIdVarScoresOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSessionIdVarScores"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUploadAudioOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUploadAudio"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTranscriptionJobidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTranscriptionJobidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodQuizGenerateDashmoreOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuizGenerateDashmore"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodExportQuizletSetidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceExportQuizletSetidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodExportKahootOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceExportKahoot"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodExportStudyDashguideOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceExportStudyDashguide"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMultiplayerRoomsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMultiplayerRooms"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMultiplayerRoomsCodeVarJoinOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarJoin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMultiplayerRoomsCodeVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMultiplayerRoomsCodeVarStartOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarStart"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMultiplayerRoomsCodeVarLeaveOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarLeave"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMultiplayerRoomsCodeVarAnswerOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarAnswer"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMultiplayerRoomsCodeVarNextOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarNext"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGeneratePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGenerate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GenerateContentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GenerateContentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUploadPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpload"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UploadHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UploadHandlerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSessionPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSession"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateSessionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateSessionLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSessionJoinPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSessionJoin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "JoinSessionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "JoinSessionLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSessionIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSessionIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetSessionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetSessionLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSessionIdVarAnswerPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSessionIdVarAnswer"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SubmitAnswerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SubmitAnswerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSessionIdVarNextPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSessionIdVarNext"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "NextQuestionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "NextQuestionLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSessionIdVarScoresGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSessionIdVarScores"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetLeaderboardLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetLeaderboardLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUploadAudioPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUploadAudio"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UploadAudioLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UploadAudioLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTranscriptionJobidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTranscriptionJobidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTranscriptionStatusLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetTranscriptionStatusLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodQuizGenerateDashmorePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuizGenerateDashmore"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GenerateMoreQuestionsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GenerateMoreQuestionsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodExportQuizletSetidVarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceExportQuizletSetidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ExportQuizletLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ExportQuizletLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodExportKahootPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceExportKahoot"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ExportKahootLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ExportKahootLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodExportStudyDashguidePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceExportStudyDashguide"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ExportStudyGuideLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ExportStudyGuideLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMultiplayerRoomsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMultiplayerRooms"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MultiplayerCreateRoomLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MultiplayerCreateRoomLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMultiplayerRoomsCodeVarJoinPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarJoin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MultiplayerJoinRoomLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MultiplayerJoinRoomLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMultiplayerRoomsCodeVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MultiplayerGetRoomLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MultiplayerGetRoomLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMultiplayerRoomsCodeVarStartPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarStart"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MultiplayerStartRoomLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MultiplayerStartRoomLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMultiplayerRoomsCodeVarLeavePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarLeave"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MultiplayerLeaveRoomLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MultiplayerLeaveRoomLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMultiplayerRoomsCodeVarAnswerPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarAnswer"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MultiplayerSubmitAnswerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MultiplayerSubmitAnswerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMultiplayerRoomsCodeVarNextPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarNext"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MultiplayerNextQuestionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MultiplayerNextQuestionLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1760841734429": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodGenerateOptions",
              "ApiGatewayMethodUploadOptions",
              "ApiGatewayMethodSessionOptions",
              "ApiGatewayMethodSessionJoinOptions",
              "ApiGatewayMethodSessionIdVarOptions",
              "ApiGatewayMethodSessionIdVarAnswerOptions",
              "ApiGatewayMethodSessionIdVarNextOptions",
              "ApiGatewayMethodSessionIdVarScoresOptions",
              "ApiGatewayMethodUploadAudioOptions",
              "ApiGatewayMethodTranscriptionJobidVarOptions",
              "ApiGatewayMethodQuizGenerateDashmoreOptions",
              "ApiGatewayMethodExportQuizletSetidVarOptions",
              "ApiGatewayMethodExportKahootOptions",
              "ApiGatewayMethodExportStudyDashguideOptions",
              "ApiGatewayMethodMultiplayerRoomsOptions",
              "ApiGatewayMethodMultiplayerRoomsCodeVarJoinOptions",
              "ApiGatewayMethodMultiplayerRoomsCodeVarOptions",
              "ApiGatewayMethodMultiplayerRoomsCodeVarStartOptions",
              "ApiGatewayMethodMultiplayerRoomsCodeVarLeaveOptions",
              "ApiGatewayMethodMultiplayerRoomsCodeVarAnswerOptions",
              "ApiGatewayMethodMultiplayerRoomsCodeVarNextOptions",
              "ApiGatewayMethodGeneratePost",
              "ApiGatewayMethodUploadPost",
              "ApiGatewayMethodSessionPost",
              "ApiGatewayMethodSessionJoinPost",
              "ApiGatewayMethodSessionIdVarGet",
              "ApiGatewayMethodSessionIdVarAnswerPost",
              "ApiGatewayMethodSessionIdVarNextPost",
              "ApiGatewayMethodSessionIdVarScoresGet",
              "ApiGatewayMethodUploadAudioPost",
              "ApiGatewayMethodTranscriptionJobidVarGet",
              "ApiGatewayMethodQuizGenerateDashmorePost",
              "ApiGatewayMethodExportQuizletSetidVarPost",
              "ApiGatewayMethodExportKahootPost",
              "ApiGatewayMethodExportStudyDashguidePost",
              "ApiGatewayMethodMultiplayerRoomsPost",
              "ApiGatewayMethodMultiplayerRoomsCodeVarJoinPost",
              "ApiGatewayMethodMultiplayerRoomsCodeVarGet",
              "ApiGatewayMethodMultiplayerRoomsCodeVarStartPost",
              "ApiGatewayMethodMultiplayerRoomsCodeVarLeavePost",
              "ApiGatewayMethodMultiplayerRoomsCodeVarAnswerPost",
              "ApiGatewayMethodMultiplayerRoomsCodeVarNextPost"
            ]
          },
          "GenerateContentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GenerateContentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UploadHandlerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UploadHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateSessionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateSessionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "JoinSessionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "JoinSessionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetSessionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSessionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SubmitAnswerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SubmitAnswerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "NextQuestionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "NextQuestionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetLeaderboardLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetLeaderboardLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UploadAudioLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UploadAudioLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTranscriptionStatusLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTranscriptionStatusLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GenerateMoreQuestionsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GenerateMoreQuestionsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ExportQuizletLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExportQuizletLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ExportKahootLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExportKahootLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ExportStudyGuideLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExportStudyGuideLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MultiplayerCreateRoomLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MultiplayerCreateRoomLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MultiplayerJoinRoomLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MultiplayerJoinRoomLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MultiplayerGetRoomLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MultiplayerGetRoomLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MultiplayerStartRoomLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MultiplayerStartRoomLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MultiplayerLeaveRoomLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MultiplayerLeaveRoomLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MultiplayerSubmitAnswerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MultiplayerSubmitAnswerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MultiplayerNextQuestionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MultiplayerNextQuestionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "QuizSessionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "ai-study-assistant-dev-QuizSessions",
              "AttributeDefinitions": [
                {
                  "AttributeName": "sessionId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "roomCode",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "sessionId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "RoomCodeIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "roomCode",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              }
            }
          },
          "MultiplayerRoomsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "ai-study-assistant-dev-MultiplayerRooms",
              "AttributeDefinitions": [
                {
                  "AttributeName": "code",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "code",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              }
            }
          },
          "TranscriptionJobsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "ai-study-assistant-dev-TranscriptionJobs",
              "AttributeDefinitions": [
                {
                  "AttributeName": "jobId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "jobId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-ServerlessDeploymentBucketName"
            }
          },
          "GenerateContentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GenerateContentLambdaVersionCMtMVYcn5zawCmJrN4wd5JMQPtuCJlPKVvGMSYnKhng"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-GenerateContentLambdaFunctionQualifiedArn"
            }
          },
          "UploadHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UploadHandlerLambdaVersionga586JGo25jDKZdJpB7VqfyNISr5nmrORoEoSZl7qI"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-UploadHandlerLambdaFunctionQualifiedArn"
            }
          },
          "CreateSessionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateSessionLambdaVersionKsw89Nijl98BuiFp70USTGCtWkpkLMh7GiTq8NC7Y"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-CreateSessionLambdaFunctionQualifiedArn"
            }
          },
          "JoinSessionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "JoinSessionLambdaVersionirpxIZ38przD81IiKgiMJkNlHkgIUW7XbLyFnTDJDJo"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-JoinSessionLambdaFunctionQualifiedArn"
            }
          },
          "GetSessionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSessionLambdaVersionN4X630kO5T1uWIBV0ZOpvviQUGidJ9t6ApW4SPozTmM"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-GetSessionLambdaFunctionQualifiedArn"
            }
          },
          "SubmitAnswerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SubmitAnswerLambdaVersionmwMnqukxoiWOGueQ37pMxwa8udxTrFpadAh15hjKE"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-SubmitAnswerLambdaFunctionQualifiedArn"
            }
          },
          "NextQuestionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "NextQuestionLambdaVersioniYdzxMZ8KrALp0mhaWeHqXUa5PSpFGyiwoIdP8q6Q"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-NextQuestionLambdaFunctionQualifiedArn"
            }
          },
          "GetLeaderboardLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetLeaderboardLambdaVersionDwrL49OiTI8gQSA6txfVhrWC01rGtYKZsvI3ef0wQ"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-GetLeaderboardLambdaFunctionQualifiedArn"
            }
          },
          "UploadAudioLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UploadAudioLambdaVersion6nwmcp92nMk6CDZ9QFQHL00HgJmvYwug91c36KQ6k"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-UploadAudioLambdaFunctionQualifiedArn"
            }
          },
          "GetTranscriptionStatusLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTranscriptionStatusLambdaVersionAx4GKqbWH0gfjoOwLnpl86ctGQMQBEw8vOC19DtKBs"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-GetTranscriptionStatusLambdaFunctionQualifiedArn"
            }
          },
          "GenerateMoreQuestionsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GenerateMoreQuestionsLambdaVersionFAyU7ip1ucmTxbl9wNGvjE3y75EaaDDVN1NlaDmC8"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-GenerateMoreQuestionsLambdaFunctionQualifiedArn"
            }
          },
          "ExportQuizletLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExportQuizletLambdaVersion3hoDopZfupT5VvioPxFCIUQ24PLLyPQ3PXoT1FNvo"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-ExportQuizletLambdaFunctionQualifiedArn"
            }
          },
          "ExportKahootLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExportKahootLambdaVersionVs5c2K65XSVW7NFqH0Fyh4E9wSSgTK3BHuLfI6WaYk"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-ExportKahootLambdaFunctionQualifiedArn"
            }
          },
          "ExportStudyGuideLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExportStudyGuideLambdaVersionZMlZs01L8jHNCJsasZsQgBmkcddWBVT9GxcckhuyVA"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-ExportStudyGuideLambdaFunctionQualifiedArn"
            }
          },
          "MultiplayerCreateRoomLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MultiplayerCreateRoomLambdaVersionqd9YGUmkUQnzKEO5nlERRkerO9g4dSpQkFVDvYrI"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-MultiplayerCreateRoomLambdaFunctionQualifiedArn"
            }
          },
          "MultiplayerJoinRoomLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MultiplayerJoinRoomLambdaVersion9Ag9i8PHpQyzaj2pdYldUq7YlbzN1zBZBkgBOP9emRc"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-MultiplayerJoinRoomLambdaFunctionQualifiedArn"
            }
          },
          "MultiplayerGetRoomLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MultiplayerGetRoomLambdaVersionZVTu0zuqaoYv7tKWIEw5x0t4smERPkcgUQtPWhmEE"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-MultiplayerGetRoomLambdaFunctionQualifiedArn"
            }
          },
          "MultiplayerStartRoomLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MultiplayerStartRoomLambdaVersiondLLX7RxqJc2IYbKhmdH0H6IwOgpOyphbL1A4UvbQ1x8"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-MultiplayerStartRoomLambdaFunctionQualifiedArn"
            }
          },
          "MultiplayerLeaveRoomLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MultiplayerLeaveRoomLambdaVersionykRSDbjWMw0TgXzXR5hjxUhZVT0iEacn5cYKChiAiU"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-MultiplayerLeaveRoomLambdaFunctionQualifiedArn"
            }
          },
          "MultiplayerSubmitAnswerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MultiplayerSubmitAnswerLambdaVersionNzR6npAmWjtvCyaeBMgSqMcHwuE8iqnGQX9YM9VFkRE"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-MultiplayerSubmitAnswerLambdaFunctionQualifiedArn"
            }
          },
          "MultiplayerNextQuestionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MultiplayerNextQuestionLambdaVersionVojnY3cIZy2XmYKhfcb4l6BW7B8TOjkCXSx8dRxoY"
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-MultiplayerNextQuestionLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-ai-study-assistant-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "serverless-offline": {
        "httpPort": 3001
      }
    },
    "plugins": [
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "generateContent": {
        "handler": "functions/generateContent.handler",
        "events": [
          {
            "http": {
              "path": "generate",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-generateContent",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GenerateContentLambdaVersionCMtMVYcn5zawCmJrN4wd5JMQPtuCJlPKVvGMSYnKhng"
      },
      "uploadHandler": {
        "handler": "functions/uploadHandler.handler",
        "events": [
          {
            "http": {
              "path": "upload",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-uploadHandler",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UploadHandlerLambdaVersionga586JGo25jDKZdJpB7VqfyNISr5nmrORoEoSZl7qI"
      },
      "createSession": {
        "handler": "functions/createSession.handler",
        "events": [
          {
            "http": {
              "path": "session",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-createSession",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateSessionLambdaVersionKsw89Nijl98BuiFp70USTGCtWkpkLMh7GiTq8NC7Y"
      },
      "joinSession": {
        "handler": "functions/joinSession.handler",
        "events": [
          {
            "http": {
              "path": "session/join",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-joinSession",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "JoinSessionLambdaVersionirpxIZ38przD81IiKgiMJkNlHkgIUW7XbLyFnTDJDJo"
      },
      "getSession": {
        "handler": "functions/getSession.handler",
        "events": [
          {
            "http": {
              "path": "session/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-getSession",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetSessionLambdaVersionN4X630kO5T1uWIBV0ZOpvviQUGidJ9t6ApW4SPozTmM"
      },
      "submitAnswer": {
        "handler": "functions/submitAnswer.handler",
        "events": [
          {
            "http": {
              "path": "session/{id}/answer",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-submitAnswer",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SubmitAnswerLambdaVersionmwMnqukxoiWOGueQ37pMxwa8udxTrFpadAh15hjKE"
      },
      "nextQuestion": {
        "handler": "functions/nextQuestion.handler",
        "events": [
          {
            "http": {
              "path": "session/{id}/next",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-nextQuestion",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "NextQuestionLambdaVersioniYdzxMZ8KrALp0mhaWeHqXUa5PSpFGyiwoIdP8q6Q"
      },
      "getLeaderboard": {
        "handler": "functions/getLeaderboard.handler",
        "events": [
          {
            "http": {
              "path": "session/{id}/scores",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-getLeaderboard",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetLeaderboardLambdaVersionDwrL49OiTI8gQSA6txfVhrWC01rGtYKZsvI3ef0wQ"
      },
      "uploadAudio": {
        "handler": "functions/uploadAudio.handler",
        "events": [
          {
            "http": {
              "path": "upload/audio",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-uploadAudio",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UploadAudioLambdaVersion6nwmcp92nMk6CDZ9QFQHL00HgJmvYwug91c36KQ6k"
      },
      "getTranscriptionStatus": {
        "handler": "functions/getTranscriptionStatus.handler",
        "events": [
          {
            "http": {
              "path": "transcription/{jobId}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-getTranscriptionStatus",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetTranscriptionStatusLambdaVersionAx4GKqbWH0gfjoOwLnpl86ctGQMQBEw8vOC19DtKBs"
      },
      "generateMoreQuestions": {
        "handler": "functions/generateMoreQuestions.handler",
        "events": [
          {
            "http": {
              "path": "quiz/generate-more",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-generateMoreQuestions",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GenerateMoreQuestionsLambdaVersionFAyU7ip1ucmTxbl9wNGvjE3y75EaaDDVN1NlaDmC8"
      },
      "exportQuizlet": {
        "handler": "functions/exportQuizlet.handler",
        "events": [
          {
            "http": {
              "path": "export/quizlet/{setId}",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-exportQuizlet",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ExportQuizletLambdaVersion3hoDopZfupT5VvioPxFCIUQ24PLLyPQ3PXoT1FNvo"
      },
      "exportKahoot": {
        "handler": "functions/exportKahoot.handler",
        "events": [
          {
            "http": {
              "path": "export/kahoot",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-exportKahoot",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ExportKahootLambdaVersionVs5c2K65XSVW7NFqH0Fyh4E9wSSgTK3BHuLfI6WaYk"
      },
      "exportStudyGuide": {
        "handler": "functions/exportStudyGuide.handler",
        "events": [
          {
            "http": {
              "path": "export/study-guide",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-exportStudyGuide",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ExportStudyGuideLambdaVersionZMlZs01L8jHNCJsasZsQgBmkcddWBVT9GxcckhuyVA"
      },
      "multiplayerCreateRoom": {
        "handler": "functions/multiplayerCreateRoom.handler",
        "events": [
          {
            "http": {
              "path": "multiplayer/rooms",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-multiplayerCreateRoom",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "MultiplayerCreateRoomLambdaVersionqd9YGUmkUQnzKEO5nlERRkerO9g4dSpQkFVDvYrI"
      },
      "multiplayerJoinRoom": {
        "handler": "functions/multiplayerJoinRoom.handler",
        "events": [
          {
            "http": {
              "path": "multiplayer/rooms/{code}/join",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-multiplayerJoinRoom",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "MultiplayerJoinRoomLambdaVersion9Ag9i8PHpQyzaj2pdYldUq7YlbzN1zBZBkgBOP9emRc"
      },
      "multiplayerGetRoom": {
        "handler": "functions/multiplayerGetRoom.handler",
        "events": [
          {
            "http": {
              "path": "multiplayer/rooms/{code}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-multiplayerGetRoom",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "MultiplayerGetRoomLambdaVersionZVTu0zuqaoYv7tKWIEw5x0t4smERPkcgUQtPWhmEE"
      },
      "multiplayerStartRoom": {
        "handler": "functions/multiplayerStartRoom.handler",
        "events": [
          {
            "http": {
              "path": "multiplayer/rooms/{code}/start",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-multiplayerStartRoom",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "MultiplayerStartRoomLambdaVersiondLLX7RxqJc2IYbKhmdH0H6IwOgpOyphbL1A4UvbQ1x8"
      },
      "multiplayerLeaveRoom": {
        "handler": "functions/multiplayerLeaveRoom.handler",
        "events": [
          {
            "http": {
              "path": "multiplayer/rooms/{code}/leave",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-multiplayerLeaveRoom",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "MultiplayerLeaveRoomLambdaVersionykRSDbjWMw0TgXzXR5hjxUhZVT0iEacn5cYKChiAiU"
      },
      "multiplayerSubmitAnswer": {
        "handler": "functions/multiplayerSubmitAnswer.handler",
        "events": [
          {
            "http": {
              "path": "multiplayer/rooms/{code}/answer",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-multiplayerSubmitAnswer",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "MultiplayerSubmitAnswerLambdaVersionNzR6npAmWjtvCyaeBMgSqMcHwuE8iqnGQX9YM9VFkRE"
      },
      "multiplayerNextQuestion": {
        "handler": "functions/multiplayerNextQuestion.handler",
        "events": [
          {
            "http": {
              "path": "multiplayer/rooms/{code}/next",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ai-study-assistant-dev-multiplayerNextQuestion",
        "package": {},
        "memory": 1024,
        "timeout": 60,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "MultiplayerNextQuestionLambdaVersionVojnY3cIZy2XmYKhfcb4l6BW7B8TOjkCXSx8dRxoY"
      }
    },
    "resources": {
      "Resources": {
        "QuizSessionsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "ai-study-assistant-dev-QuizSessions",
            "AttributeDefinitions": [
              {
                "AttributeName": "sessionId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "roomCode",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "sessionId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "RoomCodeIndex",
                "KeySchema": [
                  {
                    "AttributeName": "roomCode",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            }
          }
        },
        "MultiplayerRoomsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "ai-study-assistant-dev-MultiplayerRooms",
            "AttributeDefinitions": [
              {
                "AttributeName": "code",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "code",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            }
          }
        },
        "TranscriptionJobsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "ai-study-assistant-dev-TranscriptionJobs",
            "AttributeDefinitions": [
              {
                "AttributeName": "jobId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "jobId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "ai-study-assistant",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/matt/Desktop/Hackathon/backend/.serverless/ai-study-assistant.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/ai-study-assistant/dev/1760841738911-2025-10-19T02:42:18.911Z",
    "artifact": "ai-study-assistant.zip"
  }
}