{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "GenerateContentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-generateContent"
      }
    },
    "UploadHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-uploadHandler"
      }
    },
    "CreateSessionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-createSession"
      }
    },
    "JoinSessionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-joinSession"
      }
    },
    "GetSessionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-getSession"
      }
    },
    "SubmitAnswerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-submitAnswer"
      }
    },
    "NextQuestionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-nextQuestion"
      }
    },
    "GetLeaderboardLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-getLeaderboard"
      }
    },
    "UploadAudioLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-uploadAudio"
      }
    },
    "GetTranscriptionStatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-getTranscriptionStatus"
      }
    },
    "GenerateMoreQuestionsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-generateMoreQuestions"
      }
    },
    "ExportQuizletLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-exportQuizlet"
      }
    },
    "ExportKahootLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-exportKahoot"
      }
    },
    "ExportStudyGuideLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-exportStudyGuide"
      }
    },
    "MultiplayerCreateRoomLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-multiplayerCreateRoom"
      }
    },
    "MultiplayerJoinRoomLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-multiplayerJoinRoom"
      }
    },
    "MultiplayerGetRoomLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-multiplayerGetRoom"
      }
    },
    "MultiplayerStartRoomLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-multiplayerStartRoom"
      }
    },
    "MultiplayerLeaveRoomLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-multiplayerLeaveRoom"
      }
    },
    "MultiplayerSubmitAnswerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-multiplayerSubmitAnswer"
      }
    },
    "MultiplayerNextQuestionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ai-study-assistant-dev-multiplayerNextQuestion"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "ai-study-assistant",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ai-study-assistant-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ai-study-assistant-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:us-east-1:*:table/ai-study-assistant-dev-QuizSessions",
                    "arn:aws:dynamodb:us-east-1:*:table/ai-study-assistant-dev-QuizSessions/index/*",
                    "arn:aws:dynamodb:us-east-1:*:table/ai-study-assistant-dev-MultiplayerRooms",
                    "arn:aws:dynamodb:us-east-1:*:table/ai-study-assistant-dev-TranscriptionJobs"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "bedrock:InvokeModel",
                    "bedrock:ListFoundationModels",
                    "bedrock:GetFoundationModel",
                    "aws-marketplace:ViewSubscriptions"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "ai-study-assistant",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "GenerateContentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/generateContent.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-generateContent",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GenerateContentLogGroup"
      ]
    },
    "UploadHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/uploadHandler.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-uploadHandler",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UploadHandlerLogGroup"
      ]
    },
    "CreateSessionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/createSession.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-createSession",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateSessionLogGroup"
      ]
    },
    "JoinSessionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/joinSession.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-joinSession",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "JoinSessionLogGroup"
      ]
    },
    "GetSessionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/getSession.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-getSession",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetSessionLogGroup"
      ]
    },
    "SubmitAnswerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/submitAnswer.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-submitAnswer",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SubmitAnswerLogGroup"
      ]
    },
    "NextQuestionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/nextQuestion.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-nextQuestion",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "NextQuestionLogGroup"
      ]
    },
    "GetLeaderboardLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/getLeaderboard.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-getLeaderboard",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetLeaderboardLogGroup"
      ]
    },
    "UploadAudioLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/uploadAudio.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-uploadAudio",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UploadAudioLogGroup"
      ]
    },
    "GetTranscriptionStatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/getTranscriptionStatus.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-getTranscriptionStatus",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetTranscriptionStatusLogGroup"
      ]
    },
    "GenerateMoreQuestionsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/generateMoreQuestions.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-generateMoreQuestions",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GenerateMoreQuestionsLogGroup"
      ]
    },
    "ExportQuizletLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/exportQuizlet.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-exportQuizlet",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ExportQuizletLogGroup"
      ]
    },
    "ExportKahootLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/exportKahoot.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-exportKahoot",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ExportKahootLogGroup"
      ]
    },
    "ExportStudyGuideLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/exportStudyGuide.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-exportStudyGuide",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ExportStudyGuideLogGroup"
      ]
    },
    "MultiplayerCreateRoomLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/multiplayerCreateRoom.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-multiplayerCreateRoom",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "MultiplayerCreateRoomLogGroup"
      ]
    },
    "MultiplayerJoinRoomLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/multiplayerJoinRoom.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-multiplayerJoinRoom",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "MultiplayerJoinRoomLogGroup"
      ]
    },
    "MultiplayerGetRoomLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/multiplayerGetRoom.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-multiplayerGetRoom",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "MultiplayerGetRoomLogGroup"
      ]
    },
    "MultiplayerStartRoomLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/multiplayerStartRoom.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-multiplayerStartRoom",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "MultiplayerStartRoomLogGroup"
      ]
    },
    "MultiplayerLeaveRoomLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/multiplayerLeaveRoom.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-multiplayerLeaveRoom",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "MultiplayerLeaveRoomLogGroup"
      ]
    },
    "MultiplayerSubmitAnswerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/multiplayerSubmitAnswer.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-multiplayerSubmitAnswer",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "MultiplayerSubmitAnswerLogGroup"
      ]
    },
    "MultiplayerNextQuestionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ai-study-assistant/dev/1760852051959-2025-10-19T05:34:11.959Z/ai-study-assistant.zip"
        },
        "Handler": "functions/multiplayerNextQuestion.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "ai-study-assistant-dev-multiplayerNextQuestion",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BEDROCK_MODEL_ID": "amazon.nova-pro-v1:0",
            "DYNAMODB_TABLE": "ai-study-assistant-dev-QuizSessions",
            "MULTIPLAYER_ROOMS_TABLE": "ai-study-assistant-dev-MultiplayerRooms",
            "TRANSCRIPTION_JOBS_TABLE": "ai-study-assistant-dev-TranscriptionJobs"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "MultiplayerNextQuestionLogGroup"
      ]
    },
    "GenerateContentLambdaVersionx7aPzw2vb89uFw6D1TLlBn6swIGfTJ8N6nR0Z6GWr8s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GenerateContentLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "UploadHandlerLambdaVersionT6le4AZfdh0xScqdsB47uDLq22MT0PQ6y3xJW0IlUkg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadHandlerLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "CreateSessionLambdaVersionciXGUxagVL6acp7UJr0YuS0lZ8fi34CBgfWy65rVA5M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateSessionLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "JoinSessionLambdaVersion9jW3YaDkLikBJhtN1n1odNGZJEZhpeQcu1lCyp4hibA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "JoinSessionLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "GetSessionLambdaVersion2Q0Zgy6UdezJplieeN3jjFlJTVajtrUjBydLkLcHo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetSessionLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "SubmitAnswerLambdaVersionFMxSMafCZgC2CYIUltVOm8a1sEqcCuSVIpb9P85HSc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SubmitAnswerLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "NextQuestionLambdaVersionqgU4y0EoOlGCBV2RAFs8kkE4XVstyGPyvpBBcSeQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "NextQuestionLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "GetLeaderboardLambdaVersionNmFor77fU1IwVs86SmXzUAkBUT9pLTg7JZ9T6buIk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetLeaderboardLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "UploadAudioLambdaVersionHUPlxaEBGITvPHSxnC8mBCccMe5xgNPfOKyy8Ciccc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadAudioLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "GetTranscriptionStatusLambdaVersiontGOHBs7CjgOz4hzj2P4xRCHu7BnUMqHnC1fSoAVnA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTranscriptionStatusLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "GenerateMoreQuestionsLambdaVersionEObSmHJ1CgItEjZXXR7JzoSKKsagBU3ubtdfOa3yA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GenerateMoreQuestionsLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "ExportQuizletLambdaVersionS5xGUa3MqecwS8eXeqOPyBP8CXi5ykcZhdBistte1jQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ExportQuizletLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "ExportKahootLambdaVersion8h2AE25UjgIys0lQXKrMj4WeSayLGU7fmjvS47dYxnY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ExportKahootLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "ExportStudyGuideLambdaVersionyNhcU3qjsOZsRPgxqUoh4TEPl3LjwBdfwQkCF4oZiA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ExportStudyGuideLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "MultiplayerCreateRoomLambdaVersionZNQt7TwbWiO2iuz3QKM83u2uYA2HiejgNeD6YmCKHs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MultiplayerCreateRoomLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "MultiplayerJoinRoomLambdaVersion1swsOW0g9lT0BxM7ophUMKKSO7L6NS70ziCArId8cM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MultiplayerJoinRoomLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "MultiplayerGetRoomLambdaVersioneb9saboB06FBViOkIzs9MvqJ12qDAQeqBXgvCVlALk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MultiplayerGetRoomLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "MultiplayerStartRoomLambdaVersion8i7ZDIGK3fBY6YRM4tmo0iWNiK8M3EiB5DkwoPpNw8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MultiplayerStartRoomLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "MultiplayerLeaveRoomLambdaVersionbog7NLE6wmS5ecORLiejyZqPzTYRlRf6XTgLo54t4hU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MultiplayerLeaveRoomLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "MultiplayerSubmitAnswerLambdaVersionqnvfFntQMEW0V8DzjQWtyUv2wa37CSG5PI9lg8YjLQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MultiplayerSubmitAnswerLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "MultiplayerNextQuestionLambdaVersionZVL2LPMz2TJJeEKxGNMjxvEiK7VtwTOQXxkhFcuS270": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MultiplayerNextQuestionLambdaFunction"
        },
        "CodeSha256": "SfhNF2I7TPCvXJ2+IekK115Qc/k6zohHEdsvtTTWkfw="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-ai-study-assistant",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceGenerate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "generate",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUpload": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "upload",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUploadAudio": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUpload"
        },
        "PathPart": "audio",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSession": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "session",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSessionJoin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceSession"
        },
        "PathPart": "join",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSessionIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceSession"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSessionIdVarAnswer": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceSessionIdVar"
        },
        "PathPart": "answer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSessionIdVarNext": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceSessionIdVar"
        },
        "PathPart": "next",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSessionIdVarScores": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceSessionIdVar"
        },
        "PathPart": "scores",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTranscription": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "transcription",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTranscriptionJobidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceTranscription"
        },
        "PathPart": "{jobId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceQuiz": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "quiz",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceQuizGenerateDashmore": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceQuiz"
        },
        "PathPart": "generate-more",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceExport": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "export",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceExportQuizlet": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceExport"
        },
        "PathPart": "quizlet",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceExportQuizletSetidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceExportQuizlet"
        },
        "PathPart": "{setId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceExportKahoot": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceExport"
        },
        "PathPart": "kahoot",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceExportStudyDashguide": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceExport"
        },
        "PathPart": "study-guide",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMultiplayer": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "multiplayer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMultiplayerRooms": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceMultiplayer"
        },
        "PathPart": "rooms",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMultiplayerRoomsCodeVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceMultiplayerRooms"
        },
        "PathPart": "{code}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMultiplayerRoomsCodeVarJoin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVar"
        },
        "PathPart": "join",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMultiplayerRoomsCodeVarStart": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVar"
        },
        "PathPart": "start",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMultiplayerRoomsCodeVarLeave": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVar"
        },
        "PathPart": "leave",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMultiplayerRoomsCodeVarAnswer": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVar"
        },
        "PathPart": "answer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMultiplayerRoomsCodeVarNext": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVar"
        },
        "PathPart": "next",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGenerateOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGenerate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUploadOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUpload"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSessionOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSession"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSessionJoinOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSessionJoin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSessionIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSessionIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSessionIdVarAnswerOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSessionIdVarAnswer"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSessionIdVarNextOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSessionIdVarNext"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSessionIdVarScoresOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSessionIdVarScores"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUploadAudioOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUploadAudio"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTranscriptionJobidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceTranscriptionJobidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodQuizGenerateDashmoreOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceQuizGenerateDashmore"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodExportQuizletSetidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceExportQuizletSetidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodExportKahootOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceExportKahoot"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodExportStudyDashguideOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceExportStudyDashguide"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodMultiplayerRoomsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceMultiplayerRooms"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodMultiplayerRoomsCodeVarJoinOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarJoin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodMultiplayerRoomsCodeVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodMultiplayerRoomsCodeVarStartOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarStart"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodMultiplayerRoomsCodeVarLeaveOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarLeave"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodMultiplayerRoomsCodeVarAnswerOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarAnswer"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodMultiplayerRoomsCodeVarNextOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarNext"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGeneratePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGenerate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GenerateContentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GenerateContentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUploadPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUpload"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UploadHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UploadHandlerLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSessionPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSession"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateSessionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateSessionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSessionJoinPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSessionJoin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "JoinSessionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "JoinSessionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSessionIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSessionIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetSessionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetSessionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSessionIdVarAnswerPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSessionIdVarAnswer"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SubmitAnswerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SubmitAnswerLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSessionIdVarNextPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSessionIdVarNext"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "NextQuestionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "NextQuestionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSessionIdVarScoresGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSessionIdVarScores"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetLeaderboardLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetLeaderboardLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUploadAudioPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUploadAudio"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UploadAudioLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UploadAudioLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodTranscriptionJobidVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTranscriptionJobidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetTranscriptionStatusLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetTranscriptionStatusLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodQuizGenerateDashmorePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceQuizGenerateDashmore"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GenerateMoreQuestionsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GenerateMoreQuestionsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodExportQuizletSetidVarPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceExportQuizletSetidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ExportQuizletLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ExportQuizletLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodExportKahootPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceExportKahoot"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ExportKahootLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ExportKahootLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodExportStudyDashguidePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceExportStudyDashguide"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ExportStudyGuideLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ExportStudyGuideLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMultiplayerRoomsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMultiplayerRooms"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "MultiplayerCreateRoomLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "MultiplayerCreateRoomLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMultiplayerRoomsCodeVarJoinPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarJoin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "MultiplayerJoinRoomLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "MultiplayerJoinRoomLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMultiplayerRoomsCodeVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "MultiplayerGetRoomLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "MultiplayerGetRoomLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMultiplayerRoomsCodeVarStartPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarStart"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "MultiplayerStartRoomLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "MultiplayerStartRoomLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMultiplayerRoomsCodeVarLeavePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarLeave"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "MultiplayerLeaveRoomLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "MultiplayerLeaveRoomLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMultiplayerRoomsCodeVarAnswerPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarAnswer"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "MultiplayerSubmitAnswerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "MultiplayerSubmitAnswerLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMultiplayerRoomsCodeVarNextPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMultiplayerRoomsCodeVarNext"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "MultiplayerNextQuestionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "MultiplayerNextQuestionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1760852048039": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodGenerateOptions",
        "ApiGatewayMethodUploadOptions",
        "ApiGatewayMethodSessionOptions",
        "ApiGatewayMethodSessionJoinOptions",
        "ApiGatewayMethodSessionIdVarOptions",
        "ApiGatewayMethodSessionIdVarAnswerOptions",
        "ApiGatewayMethodSessionIdVarNextOptions",
        "ApiGatewayMethodSessionIdVarScoresOptions",
        "ApiGatewayMethodUploadAudioOptions",
        "ApiGatewayMethodTranscriptionJobidVarOptions",
        "ApiGatewayMethodQuizGenerateDashmoreOptions",
        "ApiGatewayMethodExportQuizletSetidVarOptions",
        "ApiGatewayMethodExportKahootOptions",
        "ApiGatewayMethodExportStudyDashguideOptions",
        "ApiGatewayMethodMultiplayerRoomsOptions",
        "ApiGatewayMethodMultiplayerRoomsCodeVarJoinOptions",
        "ApiGatewayMethodMultiplayerRoomsCodeVarOptions",
        "ApiGatewayMethodMultiplayerRoomsCodeVarStartOptions",
        "ApiGatewayMethodMultiplayerRoomsCodeVarLeaveOptions",
        "ApiGatewayMethodMultiplayerRoomsCodeVarAnswerOptions",
        "ApiGatewayMethodMultiplayerRoomsCodeVarNextOptions",
        "ApiGatewayMethodGeneratePost",
        "ApiGatewayMethodUploadPost",
        "ApiGatewayMethodSessionPost",
        "ApiGatewayMethodSessionJoinPost",
        "ApiGatewayMethodSessionIdVarGet",
        "ApiGatewayMethodSessionIdVarAnswerPost",
        "ApiGatewayMethodSessionIdVarNextPost",
        "ApiGatewayMethodSessionIdVarScoresGet",
        "ApiGatewayMethodUploadAudioPost",
        "ApiGatewayMethodTranscriptionJobidVarGet",
        "ApiGatewayMethodQuizGenerateDashmorePost",
        "ApiGatewayMethodExportQuizletSetidVarPost",
        "ApiGatewayMethodExportKahootPost",
        "ApiGatewayMethodExportStudyDashguidePost",
        "ApiGatewayMethodMultiplayerRoomsPost",
        "ApiGatewayMethodMultiplayerRoomsCodeVarJoinPost",
        "ApiGatewayMethodMultiplayerRoomsCodeVarGet",
        "ApiGatewayMethodMultiplayerRoomsCodeVarStartPost",
        "ApiGatewayMethodMultiplayerRoomsCodeVarLeavePost",
        "ApiGatewayMethodMultiplayerRoomsCodeVarAnswerPost",
        "ApiGatewayMethodMultiplayerRoomsCodeVarNextPost"
      ]
    },
    "GenerateContentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GenerateContentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UploadHandlerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UploadHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateSessionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateSessionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "JoinSessionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "JoinSessionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetSessionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetSessionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SubmitAnswerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubmitAnswerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "NextQuestionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "NextQuestionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetLeaderboardLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetLeaderboardLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UploadAudioLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UploadAudioLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetTranscriptionStatusLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTranscriptionStatusLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GenerateMoreQuestionsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GenerateMoreQuestionsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ExportQuizletLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ExportQuizletLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ExportKahootLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ExportKahootLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ExportStudyGuideLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ExportStudyGuideLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "MultiplayerCreateRoomLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MultiplayerCreateRoomLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "MultiplayerJoinRoomLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MultiplayerJoinRoomLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "MultiplayerGetRoomLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MultiplayerGetRoomLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "MultiplayerStartRoomLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MultiplayerStartRoomLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "MultiplayerLeaveRoomLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MultiplayerLeaveRoomLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "MultiplayerSubmitAnswerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MultiplayerSubmitAnswerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "MultiplayerNextQuestionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MultiplayerNextQuestionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "QuizSessionsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "ai-study-assistant-dev-QuizSessions",
        "AttributeDefinitions": [
          {
            "AttributeName": "sessionId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "roomCode",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "sessionId",
            "KeyType": "HASH"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "RoomCodeIndex",
            "KeySchema": [
              {
                "AttributeName": "roomCode",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        }
      }
    },
    "MultiplayerRoomsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "ai-study-assistant-dev-MultiplayerRooms",
        "AttributeDefinitions": [
          {
            "AttributeName": "code",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "code",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        }
      }
    },
    "TranscriptionJobsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "ai-study-assistant-dev-TranscriptionJobs",
        "AttributeDefinitions": [
          {
            "AttributeName": "jobId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "jobId",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-ServerlessDeploymentBucketName"
      }
    },
    "GenerateContentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GenerateContentLambdaVersionx7aPzw2vb89uFw6D1TLlBn6swIGfTJ8N6nR0Z6GWr8s"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-GenerateContentLambdaFunctionQualifiedArn"
      }
    },
    "UploadHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadHandlerLambdaVersionT6le4AZfdh0xScqdsB47uDLq22MT0PQ6y3xJW0IlUkg"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-UploadHandlerLambdaFunctionQualifiedArn"
      }
    },
    "CreateSessionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateSessionLambdaVersionciXGUxagVL6acp7UJr0YuS0lZ8fi34CBgfWy65rVA5M"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-CreateSessionLambdaFunctionQualifiedArn"
      }
    },
    "JoinSessionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "JoinSessionLambdaVersion9jW3YaDkLikBJhtN1n1odNGZJEZhpeQcu1lCyp4hibA"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-JoinSessionLambdaFunctionQualifiedArn"
      }
    },
    "GetSessionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetSessionLambdaVersion2Q0Zgy6UdezJplieeN3jjFlJTVajtrUjBydLkLcHo"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-GetSessionLambdaFunctionQualifiedArn"
      }
    },
    "SubmitAnswerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SubmitAnswerLambdaVersionFMxSMafCZgC2CYIUltVOm8a1sEqcCuSVIpb9P85HSc"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-SubmitAnswerLambdaFunctionQualifiedArn"
      }
    },
    "NextQuestionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "NextQuestionLambdaVersionqgU4y0EoOlGCBV2RAFs8kkE4XVstyGPyvpBBcSeQ"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-NextQuestionLambdaFunctionQualifiedArn"
      }
    },
    "GetLeaderboardLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetLeaderboardLambdaVersionNmFor77fU1IwVs86SmXzUAkBUT9pLTg7JZ9T6buIk"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-GetLeaderboardLambdaFunctionQualifiedArn"
      }
    },
    "UploadAudioLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadAudioLambdaVersionHUPlxaEBGITvPHSxnC8mBCccMe5xgNPfOKyy8Ciccc"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-UploadAudioLambdaFunctionQualifiedArn"
      }
    },
    "GetTranscriptionStatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTranscriptionStatusLambdaVersiontGOHBs7CjgOz4hzj2P4xRCHu7BnUMqHnC1fSoAVnA"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-GetTranscriptionStatusLambdaFunctionQualifiedArn"
      }
    },
    "GenerateMoreQuestionsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GenerateMoreQuestionsLambdaVersionEObSmHJ1CgItEjZXXR7JzoSKKsagBU3ubtdfOa3yA"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-GenerateMoreQuestionsLambdaFunctionQualifiedArn"
      }
    },
    "ExportQuizletLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ExportQuizletLambdaVersionS5xGUa3MqecwS8eXeqOPyBP8CXi5ykcZhdBistte1jQ"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-ExportQuizletLambdaFunctionQualifiedArn"
      }
    },
    "ExportKahootLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ExportKahootLambdaVersion8h2AE25UjgIys0lQXKrMj4WeSayLGU7fmjvS47dYxnY"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-ExportKahootLambdaFunctionQualifiedArn"
      }
    },
    "ExportStudyGuideLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ExportStudyGuideLambdaVersionyNhcU3qjsOZsRPgxqUoh4TEPl3LjwBdfwQkCF4oZiA"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-ExportStudyGuideLambdaFunctionQualifiedArn"
      }
    },
    "MultiplayerCreateRoomLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MultiplayerCreateRoomLambdaVersionZNQt7TwbWiO2iuz3QKM83u2uYA2HiejgNeD6YmCKHs"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-MultiplayerCreateRoomLambdaFunctionQualifiedArn"
      }
    },
    "MultiplayerJoinRoomLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MultiplayerJoinRoomLambdaVersion1swsOW0g9lT0BxM7ophUMKKSO7L6NS70ziCArId8cM"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-MultiplayerJoinRoomLambdaFunctionQualifiedArn"
      }
    },
    "MultiplayerGetRoomLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MultiplayerGetRoomLambdaVersioneb9saboB06FBViOkIzs9MvqJ12qDAQeqBXgvCVlALk"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-MultiplayerGetRoomLambdaFunctionQualifiedArn"
      }
    },
    "MultiplayerStartRoomLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MultiplayerStartRoomLambdaVersion8i7ZDIGK3fBY6YRM4tmo0iWNiK8M3EiB5DkwoPpNw8"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-MultiplayerStartRoomLambdaFunctionQualifiedArn"
      }
    },
    "MultiplayerLeaveRoomLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MultiplayerLeaveRoomLambdaVersionbog7NLE6wmS5ecORLiejyZqPzTYRlRf6XTgLo54t4hU"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-MultiplayerLeaveRoomLambdaFunctionQualifiedArn"
      }
    },
    "MultiplayerSubmitAnswerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MultiplayerSubmitAnswerLambdaVersionqnvfFntQMEW0V8DzjQWtyUv2wa37CSG5PI9lg8YjLQ"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-MultiplayerSubmitAnswerLambdaFunctionQualifiedArn"
      }
    },
    "MultiplayerNextQuestionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MultiplayerNextQuestionLambdaVersionZVL2LPMz2TJJeEKxGNMjxvEiK7VtwTOQXxkhFcuS270"
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-MultiplayerNextQuestionLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-ai-study-assistant-dev-ServiceEndpoint"
      }
    }
  }
}